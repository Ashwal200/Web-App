{"version":3,"sources":["db/firebase.js","db/DataBase.js","components/Lobby.js","socket.js","components/CodeBlock.js","components/AddCodeBlock.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","dbCollection","collection","DataBase","getDocsList","async","getDocs","error","console","addCodeBlock","title","code","solution","addDoc","mentor","log","editMentor","docRef","doc","id","getDoc","exists","Error","concat","setDoc","merge","getData","document","docs","find","data","updateData","newData","getStatus","normalizedSolution","replace","trim","cleanedData","Lobby","codeBlocks","setCodeBlocks","useState","useEffect","codeBlocksList","map","fetchCodeBlocks","React","createElement","className","style","color","block","key","onClick","codeBlockId","window","location","href","handleCodeBlockClick","Link","to","FaPlus","fontSize","socket","io","CodeBlock","setCode","setTitle","complete","setComplete","useLocation","params","URLSearchParams","search","pathname","split","pop","role","get","fetchData","on","updatedCode","off","HiArrowCircleLeft","Fragment","value","onChange","e","target","emit","required","preventDefault","checkSolution","setTimeout","aria-label","SyntaxHighlighter","language","docco","AddCodeBlock","setSolution","onSubmit","CgAsterisk","type","App","disconnect","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5177f257.chunk.js","sourcesContent":["\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs, addDoc } from 'firebase/firestore';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCz-PX9Vl-E_hSmm1rhgWQihnEQR_QZDT8\",\n  authDomain: \"webworkspace-54d30.firebaseapp.com\",\n  projectId: \"webworkspace-54d30\",\n  storageBucket: \"webworkspace-54d30.appspot.com\",\n  messagingSenderId: \"465147165848\",\n  appId: \"1:465147165848:web:3827f79f607582c931a4ed\",\n  measurementId: \"G-E1D1CD7FDS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nconst db = getFirestore(app);\n\nexport { db, collection, getDocs, addDoc };","import { setDoc, doc, getDoc } from \"firebase/firestore\";\nimport { db, collection, getDocs, addDoc } from \"./firebase\";\n\n// Firestore collection reference\nconst dbCollection = collection(db, \"Codes\");\n\n// Database operations object\nexport const DataBase = {\n  // Function to fetch all documents from Firestore collection\n  getDocsList: async () => {\n    try {\n      const snapshot = await getDocs(dbCollection);\n      return snapshot;\n    } catch (error) {\n      console.error('Error pulling docs list: ', error);\n    }\n  },\n\n  // Function to add a new code block to Firestore\n  addCodeBlock: async (title, code, solution) => {\n    try {\n      // Add document to Firestore collection\n      await addDoc(dbCollection, {\n        title: title,\n        code: code,\n        solution: solution,\n        mentor: 'true'\n      });\n      console.log('Code block added successfully!');\n    } catch (error) {\n      console.error('Error adding code block: ', error);\n    }\n  },\n\n  // Function to edit mentor status of a code block in Firestore\n  editMentor: async (id) => {\n    try {\n      const docRef = doc(db, \"Codes\", id); // Reference to Firestore document\n      const docSnapshot = await getDoc(docRef);\n\n      if (!docSnapshot.exists()) {\n        throw new Error(`Document with ID ${id} does not exist`);\n      }\n\n      // Update mentor to false\n      await setDoc(docRef, {\n        mentor: 'false',\n      }, { merge: true });\n      console.log('Document updated successfully!');\n    } catch (error) {\n      console.error('Error editing mentor:', error);\n    }\n  },\n\n  // Function to fetch data of a specific code block from Firestore\n  getData: async (id) => {\n    try {\n      // Retrieve documents from Firestore\n      const snapshot = await getDocs(dbCollection);\n      // Find document by ID\n      const document = snapshot.docs.find(doc => doc.id === id);\n      return document ? document.data() : null;\n    } catch (error) {\n      console.error('Error pulling data:', error);\n    }\n  },\n\n  // Function to update code of a specific code block in Firestore\n  updateData: async (id, newData) => {\n    try {\n      // Reference to Firestore document\n      const docRef = doc(db, \"Codes\", id);\n      const docSnapshot = await getDoc(docRef);\n\n      if (!docSnapshot.exists()) {\n        throw new Error(`Document with ID ${id} does not exist`);\n      }\n\n      // Update document with new code data\n      await setDoc(docRef, { code: newData }, { merge: true });\n      console.log('Document updated successfully!');\n    } catch (error) {\n      console.error('Error updating data:', error);\n    }\n  },\n\n  // Function to check if provided solution matches expected solution in Firestore\n  getStatus: async (id, data) => {\n    try {\n      const snapshot = await getDocs(dbCollection); // Retrieve documents from Firestore\n      const document = snapshot.docs.find(doc => doc.id === id); // Find document by ID\n\n      if (!document || !document.data() || !document.data().solution) {\n        throw new Error(`Document with ID ${id} does not exist or solution is missing.`);\n      }\n      // Remove comments (single-line and multi-line)\n      const cleanedSolution = document.data().solution.replace(/\\/\\/.*|\\/\\*[^]*?\\*\\//g, '');\n\n      // Normalize whitespace (replace multiple spaces with single space)\n      const normalizedSolution = cleanedSolution.replace(/\\s+/g, ' ').trim();\n\n      const cleanedData = data.replace(/\\/\\/.*|\\/\\*[^]*?\\*\\//g, '');\n\n      const normalizedData = cleanedData.replace(/\\s+/g, ' ').trim();\n\n      return normalizedData === normalizedSolution;\n\n    } catch (error) {\n      console.error('Error checking the solution:', error);\n    }\n  }\n};\n\nexport default DataBase; \n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles.css';\nimport { DataBase } from '../db/DataBase'; \nimport { FaPlus } from \"react-icons/fa\";\n\n// Functional component for the Lobby page\nconst Lobby = () => {\n    const [codeBlocks, setCodeBlocks] = useState([]);\n\n    // Effect hook to fetch code blocks\n    useEffect(() => {\n        // Function to fetch code blocks from Firestore in real time\n        const fetchCodeBlocks = async () => {\n            try {\n                // Fetching all documents from Firestore\n                const querySnapshot = await DataBase.getDocsList(); \n\n                // Mapping Firestore documents to code block objects to show them on the page\n                const codeBlocksList = querySnapshot.docs.map(doc => ({\n                    id: doc.id,\n                    title: doc.data().title,\n                    data: doc.data().data,\n                    mentor: doc.data().mentor\n                }));\n                setCodeBlocks(codeBlocksList); \n            } catch (error) {\n                console.error('Error fetching code blocks:', error);\n            }\n        };\n        fetchCodeBlocks(); \n    }, []); \n\n    // Function to handle clicking on a code block\n    const handleCodeBlockClick = async (codeBlockId, mentor) => {\n        // Determine role (mentor or student) and navigate to the code block page\n        if (mentor === 'true') {\n            // Setting mentor status to false in Firestore to address that the mentor is in the code block\n            await DataBase.editMentor(codeBlockId); \n            // Navigate to the code block page with the role 'mentor'\n            window.location.href = `/codeblock/${codeBlockId}?role=mentor`;\n        } else {\n            // Navigate to the code block page with the role 'student'\n            window.location.href = `/codeblock/${codeBlockId}?role=student`;\n        }\n    };\n\n    return (\n        <div className=\"background-container\">\n            <div className=\"container\">\n                <div className=\"codeblocks-container\">\n                    <h1 style={{ color: '#403029' }}>Choose code block</h1>\n                    <div className=\"scrollable-section\">\n                        <ul>\n                            {codeBlocks.map(block => (\n                                <li key={block.id}>\n                                    <button onClick={() => handleCodeBlockClick(block.id, block.mentor)}>\n                                        {block.title}\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"add-code-block\">\n                    <h2 style={{ color: '#403029' }}>Add Code Block</h2>\n                    <Link to=\"/add\">\n                        <FaPlus style={{ color: '#366A68', fontSize: '40px' }} />\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Lobby;\n","// socket.js\nimport io from 'socket.io-client';\n\n// Initialize Socket.IO client with server URL\nconst socket = io('https://web-app-release.onrender.com'); \n\nexport default socket;\n","import React, { useEffect, useState } from 'react';\nimport { DataBase } from '../db/DataBase';\nimport { Link, useLocation } from 'react-router-dom';\nimport { HiArrowCircleLeft } from \"react-icons/hi\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport socket from '../socket';\n\n// Functional component for Code Block page\nconst CodeBlock = () => {\n    const [code, setCode] = useState('');\n    const [title, setTitle] = useState('');\n    const [complete, setComplete] = useState(false);\n    const location = useLocation(); // Hook to access the current location object\n    const params = new URLSearchParams(location.search); // Extracting query parameters from the URL\n    const codeBlockId = location.pathname.split('/').pop(); // Extracting the code block ID from the URL path\n    const role = params.get('role'); // Getting the role parameter from query params\n\n    // Effect to fetch code block data and subscribe to socket events\n    useEffect(() => {\n        // Function to fetch initial data of the code block\n        const fetchData = async () => {\n            try {\n\n                // Fetching code block data from Firestore using the codeBlockId\n                const data = await DataBase.getData(codeBlockId);\n                setCode(data.code);\n                setTitle(data.title);\n            } catch (error) {\n                console.error('Error fetching code block:', error);\n            }\n        };\n\n        fetchData();\n\n        // Subscribing to 'newUpdatedCode' event from socket server\n        socket.on('newUpdatedCode', (updatedCode, id) => {\n            if (id === codeBlockId) {\n                setCode(updatedCode); // Updating code state with new updated code received from server\n            }\n        });\n\n        return () => {\n            socket.off('newUpdatedCode'); // Unsubscribing from 'newUpdatedCode' event\n        };\n    }, [codeBlockId]);\n\n    // Function to handle code submission\n    const handleSubmit = async (e) => {\n        e.preventDefault(); // Preventing default form submission behavior\n        try {\n            // Updating code block data in Firestore with the current code\n            await DataBase.updateData(codeBlockId, code);\n            // Checking solution status from Firestore \n            const checkSolution = await DataBase.getStatus(codeBlockId, code);\n            setComplete(checkSolution);\n            setTimeout(() => {\n                setComplete(false);\n            }, 3000); \n        } catch (error) {\n            console.error('Error adding code block:', error);\n        }\n    };\n\n    // JSX returned by the component\n    return (\n        <div className='background-container'>\n            <Link to=\"/\">\n                <HiArrowCircleLeft className=\"btn-submit-back\"></HiArrowCircleLeft>\n            </Link>\n            <div className=\"form-group-codeblock\">\n                <div className='head'> Code: {title}</div>\n                {role === 'student' ? (\n                    <>\n                        <textarea className='textarea-code' id=\"code\" value={code}\n                            onChange={(e) => { setCode(e.target.value); socket.emit('updatedCode', e.target.value, codeBlockId); }}\n                            required />\n                        <button onClick={handleSubmit} className=\"btn-submit-save\"> Save </button>\n                        {complete && (\n                            <div className='popup-style'>\n                                <span role=\"img\" aria-label=\"smiley\">😊</span>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <SyntaxHighlighter language=\"javascript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default CodeBlock;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom'; \nimport { DataBase } from '../db/DataBase'; \nimport { HiArrowCircleLeft } from \"react-icons/hi\";\nimport { CgAsterisk } from \"react-icons/cg\"; \n\n// Functional component for adding a new code block page\nconst AddCodeBlock = () => {\n    const [title, setTitle] = useState(''); \n    const [code, setCode] = useState(''); \n    const [solution, setSolution] = useState(''); \n\n    // Function to handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault(); // Preventing default form submission behavior\n        try {\n            if (title !== '') {\n                // Calling DataBase utility function to add new code block to Firestore\n                await DataBase.addCodeBlock(title, code, solution);\n                setTitle(''); \n                setCode(''); \n                setSolution(''); \n            }\n        } catch (error) {\n            console.error('Error adding code block:', error); \n        }\n    };\n\n    // JSX returned by the component\n    return (\n        <div className=\"background-container\">\n            <Link to=\"/\">\n                <HiArrowCircleLeft className=\"btn-submit-back\"></HiArrowCircleLeft>\n            </Link>\n            <div className=\"add-code-block-container\">\n                <form className=\"add-code-block-form\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <div className='head'> Title<CgAsterisk color='darkred'/></div>\n                        <input type=\"text\" id=\"title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className='head'> Code:</div>\n                        <textarea className='textarea-hight' id=\"code\" value={code} onChange={(e) => setCode(e.target.value)} required />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className='head'> Solution:</div>\n                        <textarea className='textarea-hight' id=\"solution\" value={solution} onChange={(e) => setSolution(e.target.value)} required />\n                    </div>\n                    <button type=\"submit\" className=\"btn-submit\"> Submit </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default AddCodeBlock;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Lobby from './components/Lobby';\nimport CodeBlock from './components/CodeBlock';\nimport AddCodeBlock from './components/AddCodeBlock';\nimport io from 'socket.io-client';\n\n// Create socket connection\nconst socket = io(); \n\nfunction App() {\n\n    useEffect(() => {\n        return () => {\n            // Clean up socket connection on component unmount\n            socket.disconnect(); \n        };\n    }, []);\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/\" element={<Lobby />} />\n                <Route path=\"/codeblock/:id\" element={<CodeBlock />} />\n                <Route path=\"/add\" element={<AddCodeBlock />} />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}