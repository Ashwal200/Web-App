{"version":3,"sources":["back/firebase.js","back/DataBase.js","socket.js","components/Lobby.js","components/CodeBlock.js","components/AddCodeBlock.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","dbCollection","collection","DataBase","getDocsList","async","getDocs","addCodeBlock","title","code","addDoc","addMentor","id","mentorID","docRef","doc","docSnapshot","getDoc","exists","Error","concat","setDoc","data","mentor","merge","console","log","error","getCode","document","docs","find","updateDocument","newData","socket","io","Lobby","codeBlocks","setCodeBlocks","useState","useEffect","codeBlocksList","map","fetchCodeBlocks","disconnect","React","createElement","className","block","key","onClick","codeBlockId","window","location","href","handleCodeBlockClick","Link","to","CodeBlock","setCode","setTitle","useLocation","params","URLSearchParams","search","pathname","split","pop","role","get","fetchData","on","updatedCode","off","HiArrowCircleLeft","Fragment","value","onChange","e","target","emit","required","preventDefault","SyntaxHighlighter","language","style","docco","AddCodeBlock","htmlFor","type","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.781e3bed.chunk.js","sourcesContent":["\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs, addDoc } from 'firebase/firestore';\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCz-PX9Vl-E_hSmm1rhgWQihnEQR_QZDT8\",\n  authDomain: \"webworkspace-54d30.firebaseapp.com\",\n  projectId: \"webworkspace-54d30\",\n  storageBucket: \"webworkspace-54d30.appspot.com\",\n  messagingSenderId: \"465147165848\",\n  appId: \"1:465147165848:web:3827f79f607582c931a4ed\",\n  measurementId: \"G-E1D1CD7FDS\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\nconst db = getFirestore(app);\n\nexport { db, collection, getDocs, addDoc };","import { setDoc , doc , getDoc } from \"firebase/firestore\";\nimport { db, collection, getDocs, addDoc } from \"./firebase\";\n\nconst dbCollection = collection(db, \"Codes\")\n\nexport const DataBase = {\n  getDocsList: async () => {\n    const snapshot = await getDocs(dbCollection);\n    return snapshot;\n  },\n  addCodeBlock: async (title, code) => {\n    await addDoc(dbCollection, { title, code });\n  },\n  addMentor: async (id , mentorID) => {\n    try {\n      const docRef = doc(db, \"Codes\", id);\n      const docSnapshot = await getDoc(docRef);\n      \n      if (!docSnapshot.exists()) {\n        throw new Error(`Document with ID ${id} does not exist`);\n      }\n  \n      // Update the document with the new data\n      await setDoc(docRef, { \n        title: docSnapshot.data().title, \n        code: docSnapshot.data().code,\n        mentor: mentorID,\n        }, { merge: true });\n      console.log('Document updated successfully!');\n    } catch (error) {\n      console.error('Error updating document:', error);\n    }\n  },\n  getCode: async (id) => {\n    const snapshot = await getDocs(dbCollection);\n    const document = snapshot.docs.find(doc => doc.id === id);\n    return document ? document.data() : null;\n  },\n  // Define a function to update a specific document\n  updateDocument: async (id, newData) => {\n    try {\n      const docRef = doc(db, \"Codes\", id);\n      const docSnapshot = await getDoc(docRef);\n      \n      if (!docSnapshot.exists()) {\n        throw new Error(`Document with ID ${id} does not exist`);\n      }\n  \n      // Update the document with the new data\n      await setDoc(docRef, { title: docSnapshot.data().title, code: newData }, { merge: true });\n      console.log('Document updated successfully!');\n    } catch (error) {\n      console.error('Error updating document:', error);\n    }\n  }\n}\n\n\nexport default DataBase;","// socket.js\n\nimport io from 'socket.io-client';\n\nconst socket = io('https://web-app-release.onrender.com'); // Initialize Socket.IO client with server URL\n//const socket = io('http://localhost:5010/');\nexport default socket;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles.css';\nimport { DataBase } from '../back/DataBase'\nimport socket from '../socket';\n\nconst Lobby = () => {\n    const [codeBlocks, setCodeBlocks] = useState([]);\n\n    useEffect(() => {\n        const fetchCodeBlocks = async () => {\n            try {\n                const querySnapshot = await DataBase.getDocsList();\n                const codeBlocksList = querySnapshot.docs.map(doc => ({ id: doc.id, title: doc.data().title, data: doc.data().data , mentor : doc.data().mentor}));\n                setCodeBlocks(codeBlocksList);\n            } catch (error) {\n                console.error('Error fetching code blocks:', error);\n            }\n        };\n        fetchCodeBlocks();\n\n        return () => {\n            socket.disconnect();\n        };\n    }, []);\n\n    const handleCodeBlockClick = async (codeBlockId , mentor) => {\n        // Determine role (mentor or student) and navigate to the code block page\n        if (mentor === 'true') {\n          await DataBase.addMentor(codeBlockId , 'false')\n          // Navigate to the code block page with the role 'mentor'\n          window.location.href = `/codeblock/${codeBlockId}?role=mentor`;\n        } else {\n          // Navigate to the code block page with the role 'student'\n          window.location.href = `/codeblock/${codeBlockId}?role=student`;\n        }\n      };\n\n    return (\n        <div className=\"container\">\n            <div className=\"code-container\">\n                <h1>Choose code block</h1>\n                <div className=\"scrollable-section\">\n                    <ul>\n                        {codeBlocks.map(block => (\n                            <li key={block.id}>\n                                <button onClick={() => handleCodeBlockClick(block.id , block.mentor)}>{block.title}</button>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n            <div className=\"add-code-block\">\n                <h2>Add Code Block</h2>\n                <Link to=\"/add\">\n                    <button>Add</button>\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default Lobby;\n","import React, { useEffect, useState } from 'react';\nimport { DataBase } from '../back/DataBase';\nimport { Link, useLocation } from 'react-router-dom';\nimport { HiArrowCircleLeft } from \"react-icons/hi\";\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport socket from '../socket';\n\n\nconst CodeBlock = () => {\n    const [code, setCode] = useState('');\n    const [title, setTitle] = useState('');\n    const location = useLocation();\n    // Get the query parameters from the URL\n    const params = new URLSearchParams(location.search);\n    const codeBlockId = location.pathname.split('/').pop();\n    const role = params.get('role');\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            try {\n                \n                const data = await DataBase.getCode(codeBlockId);\n                setCode(data.code);\n                setTitle(data.title);\n                console.log(role);\n            } catch (error) {\n                console.error('Error fetching code block:', error);\n            }\n        };\n\n        fetchData();\n\n\n        // Listen for updated code from the server\n        socket.on('newUpdatedCode', (updatedCode) => {\n            setCode(updatedCode);\n        });\n\n        return () => {\n            socket.off('newUpdatedCode');\n        };\n\n\n    }, [codeBlockId]);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await DataBase.updateDocument(codeBlockId, code);\n        } catch (error) {\n            console.error('Error adding code block:', error);\n        }\n    };\n\n    return (\n        <div>\n            <Link to=\"/\">\n                <HiArrowCircleLeft className=\"btn-submit-back\"></HiArrowCircleLeft>\n            </Link>\n            <div className=\"form-group-code\">\n                <div className='head'> Code: {title}</div>\n                {role === 'student' ? (\n                    <>\n                        <textarea className='textarea-code' id=\"code\" value={code} onChange={(e) => { setCode(e.target.value); socket.emit('updatedCode', e.target.value); }} required />\n                        <button onClick={handleSubmit} className=\"btn-submit-save\"> Save </button>\n                    </>\n                ) : (\n                    <SyntaxHighlighter language=\"javascript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </div>\n        </div>\n    );\n};\nexport default CodeBlock;\n","import React, { useState , useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { DataBase } from '../back/DataBase';\n\nconst AddCodeBlock = () => {\n    const [title, setTitle] = useState('');\n    const [code, setCode] = useState('');\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await DataBase.addCodeBlock(title, code);\n            setTitle('')\n            setCode('')\n            \n            // Redirect to the lobby page after successful submission\n        } catch (error) {\n            console.error('Error adding code block:', error);\n            // Handle error (e.g., display an error message)\n        }\n    };\n\n    return (\n        <div className=\"add-code-block-container\"> \n            <h2>Add Code Block</h2>\n            <form className=\"add-code-block-form\">\n                <div className=\"form-group\"> \n                    <label htmlFor=\"title\">Title:</label>\n                    <input type=\"text\" id=\"title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"code\">Code:</label>\n                    <textarea id=\"code\" value={code} onChange={(e) => setCode(e.target.value)} required />\n                </div>\n                <button onClick={handleSubmit} className=\"btn-submit\"> Submit </button>\n                <Link to=\"/\">\n                    <button className=\"btn-submit\">Lobby</button>\n                </Link>\n            </form>\n        </div>\n    );\n};\n\nexport default AddCodeBlock;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Lobby from './components/Lobby';\nimport CodeBlock from './components/CodeBlock';\nimport AddCodeBlock from './components/AddCodeBlock';\nimport io from 'socket.io-client';\n\nconst socket = io(); // Establish socket connection\n\nfunction App() {\n\n    // useEffect(() => {\n    //     return () => {\n    //         socket.disconnect(); // Clean up socket connection on component unmount\n    //     };\n    // }, []);\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/\" element={<Lobby />} />\n                <Route path=\"/codeblock/:id\" element={<CodeBlock />} />\n                <Route path=\"/add\" element={<AddCodeBlock />} />\n            </Routes>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}